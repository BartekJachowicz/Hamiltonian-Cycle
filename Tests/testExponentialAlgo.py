from Algorithms.brutAlgorithm import brutAlgorithm
from Algorithms.iepAlgorithm import incExcAlgorithm
from Algorithms.dynamicAlgorithm import dynamicAlgorithm
from random import randint
import networkx as nx
import time


def testExponentialAlgorithms(graph):
    print("INCLUSION EXCLUSION PRINCIPLE")
    start = time.time()
    incExc = incExcAlgorithm(graph)
    end = time.time()
    print("Answer:", incExc, "Time:", (end - start) * 1000)

    print("BASIC DYNAMIC")
    start = time.time()
    dynamic = dynamicAlgorithm(graph)
    end = time.time()
    print("Answer", dynamic, "TIME:", (end - start) * 1000)

    brut = brutAlgorithm(graph)
    print("Correct answer (generated by brut force algorithm):", brut)

    print()


def generateTest():
    cycleSize = randint(3, 20)

    G = nx.Graph()
    for i in range(cycleSize):
        G.add_node(i)
        G.add_edge(i, i + 1)

    G.add_edge(cycleSize, 0)

    decision = bool(randint(0, 1))

    m = (cycleSize * (cycleSize - 1) / 2) - cycleSize
    edgeNumber = 0
    if m > 0:
        edgeNumber = randint(0, min(int(m / 3), 30))

    for i in range(edgeNumber):
        u, v = 0, 1
        while (u, v) in G.edges():
            u = randint(1, cycleSize - 1)
            v = randint(1, cycleSize - 1)
            while u == v:
                v = randint(1, cycleSize - 1)

            if u > v:
                u, v = v, u

        G.add_edge(u, v)

    if not decision:
        G.remove_edge(cycleSize, 0)

    return G


if __name__ == '__main__':
    g = generateTest()

    print("VERTEX NUMBER:", len(g.nodes()), "EDGE NUMBER:", len(g.edges()))

    testExponentialAlgorithms(g)

